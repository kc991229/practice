/*
有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。
你站在其中一块黑色的瓷砖上，只能向相邻的（上下左右四个方向）黑色瓷砖移动。
请写一个程序，计算你总共能够到达多少块黑色的瓷砖。

输入描述:
输入包含多组数据。

每组数据第一行是两个整数 m 和 n（1≤m, n≤20）。紧接着 m 行，每行包括 n 个字符。
每个字符表示一块瓷砖的颜色，规则如下：

1. “.”：黑色的瓷砖；
2. “#”：白色的瓷砖；
3. “@”：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。

输出描述:
对应每组数据，输出总共能够到达多少块黑色的瓷砖。
示例1
输入
9 6

 ....#.
 .....#
 ......
 ......
 ......
 ......
 ......
 #@...#
 .#..#.

输出
45
*/

#include<iostream>
#include<vector>
using namespace std;

int num = 0;
void Result(vector<vector<char>>&arr, int x, int y)
{
	if (x<0 || x >= arr.size() || y<0 || y >= arr[0].size() || arr[x][y] == '#')//走不通
		return;
	num++;
	arr[x][y] = '#';//走过之后也不能走了
	Result(arr, x - 1, y);//上下左右
	Result(arr, x + 1, y);
	Result(arr, x, y - 1);
	Result(arr, x, y + 1);
}
int main()
{
	int m = 0, n = 0;
	while (cin >> m >> n)
	{
		vector<vector<char>>v(m, vector<char>(n));
		int x = 0, y = 0;
		for (int i = 0; i<m; i++){
			for (int j = 0; j<n; j++){
				cin >> v[i][j];
				if (v[i][j] == '@')
				{
					x = i;
					y = j;
				}
			}
		}
		Result(v, x, y);
		cout << num << endl;
		num = 0;
	}
	return 0;
}

/*

现在有两个好友A和B，住在一片长有蘑菇的由n＊m个方格组成的草地，A在(1,1),B在(n,m)。
现在A想要拜访B，由于她只想去B的家，所以每次她只会走(i,j+1)或(i+1,j)这样的路线，
在草地上有k个蘑菇种在格子里(多个蘑菇可能在同一方格),问：A如果每一步随机选择的话(若她在边界上，
则只有一种选择)，那么她不碰到蘑菇走到B的家的概率是多少？

输入描述:
第一行N，M，K(1 ≤ N,M ≤ 20, k ≤ 100),N,M为草地大小，接下来K行，每行两个整数x，y，
代表(x,y)处有一个蘑菇。

输出描述:
输出一行，代表所求概率(保留到2位小数)
示例1
输入
2 2 1
2 1
输出
0.50
*/
